import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

apply plugin: 'java-library'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java-test-fixtures'
apply plugin: 'idea'
apply plugin: 'com.squareup.wire'

archivesBaseName = "signal-service-java"
version          = lib_signal_service_version_number
group            = lib_signal_service_group_info

java {
    withJavadocJar()
    withSourcesJar()
    sourceCompatibility = signalJavaVersion
    targetCompatibility = signalJavaVersion
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = signalKotlinJvmTarget
    }
}

configurations {
    ideaTestFixturesImplementation { extendsFrom testFixturesImplementation; canBeConsumed false; canBeResolved true }
}

afterEvaluate {
    tasks.named('sourcesJar') {
        dependsOn tasks.named('generateMainProtos')
        duplicatesStrategy DuplicatesStrategy.INCLUDE
    }
}

dependencies {
    api libs.google.libphonenumber
    api libs.jackson.core

    implementation libs.libsignal.client
    api libs.square.okhttp3
    api libs.square.okhttp3.dnsoverhttps
    api libs.square.okio
    implementation libs.google.jsr305

    api libs.rxjava3.rxjava

    implementation libs.kotlin.stdlib.jdk8

    testImplementation testLibs.junit.junit
    testImplementation testLibs.assertj.core
    testImplementation testLibs.conscrypt.openjdk.uber
    testImplementation testLibs.mockito.core

    testFixturesImplementation libs.libsignal.client
    testFixturesImplementation testLibs.junit.junit
}

tasks.whenTaskAdded { task ->
    if (task.name.equals("lint")) {
        task.enabled = false
    }
}

wire {
    protoLibrary = true

    kotlin {
        javaInterop = true
    }

    sourcePath {
        srcDir 'src/main/protowire'
    }

    custom {
        // Comes from wire-handler jar project
        schemaHandlerFactoryClass = "org.signal.wire.Factory"
    }
}

idea {
    module {
        scopes.COMPILE.plus += [configurations.ideaTestFixturesImplementation]
    }
}
