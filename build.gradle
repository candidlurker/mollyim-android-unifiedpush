import org.gradle.api.services.BuildService
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext.kotlin_version = '1.8.10'
    repositories {
        google()
        mavenCentral()
        jcenter {
            content {
                includeVersion 'org.jetbrains.trove4j', 'trove4j', '20160824'
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.2'
        classpath 'androidx.navigation:navigation-safe-args-gradle-plugin:2.5.3'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'app.cash.exhaustive:exhaustive-gradle:0.1.1'
        classpath ('com.squareup.wire:wire-gradle-plugin:4.4.3') {
            exclude group: 'com.squareup.wire', module: 'wire-swift-generator'
            exclude group: 'com.squareup.wire', module: 'wire-grpc-client'
            exclude group: 'com.squareup.wire', module: 'wire-grpc-jvm'
            exclude group: 'com.squareup.wire', module: 'wire-grpc-server-generator'
            exclude group: 'io.outfoxx', module: 'swiftpoet'
        }
        classpath 'androidx.benchmark:benchmark-gradle-plugin:1.1.0-beta04'
        classpath files("$rootDir/wire-handler/wire-handler-1.0.0.jar")
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

apply from: "${rootDir}/constants.gradle.kts"

allprojects {
    // Needed because otherwise the kapt task defaults to jvmTarget 17, which "poisons the well" and requires us to bump up too
    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = signalKotlinJvmTarget
        }
    }
}

subprojects {
    ext.lib_signal_service_version_number   = "2.15.3"
    ext.lib_signal_service_group_info       = "org.whispersystems"
    ext.lib_signal_client_version           = "0.1.0"

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    tasks.withType(AbstractArchiveTask).configureEach {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    // MOLLY: Prevent memory starvation in parallel execution
    def limiterService = gradle.sharedServices.registerIfAbsent("concurrencyConstraint", BuildService.class) {
        it.maxParallelUsages.set(2)
    }

    //noinspection UnnecessaryQualifiedReference
    def expensiveTaskClasses = [
        com.android.build.gradle.internal.lint.AndroidLintAnalysisTask,
        com.android.build.gradle.internal.tasks.R8Task,
        org.jetbrains.kotlin.gradle.tasks.KotlinCompile,
    ]

    tasks.configureEach { task ->
        if (expensiveTaskClasses.any { it.isInstance(task) }) {
            usesService(limiterService)
        }
    }
}

task buildQa {
    group 'Verification'
    description 'Quality Assurance for build logic.'
    dependsOn gradle.includedBuild('build-logic').task(':tools:test')
}

task qa {
    group 'Verification'
    description 'Quality Assurance. Run before pushing.'
    dependsOn = [
            'buildQa',
            ':libsignal-service:test',
            ':app:testProdGmsWebsiteReleaseUnitTest',
            ':app:lintProdGmsWebsiteRelease',
            ':app:assembleProdFossWebsiteRelease',
            ':app:compileProdGmsWebsiteInstrumentationAndroidTestSources'
    ]
}

task clean(type: Delete) {
    delete rootProject.buildDir
    // Because gradle is weird, we delete here for glide-webp/lib project so the clean tasks there doesn't barf
    delete fileTree("glide-webp/lib/.cxx")
}

task format {
    group 'Formatting'
    description 'Runs the ktlint formatter on all sources in this project and included builds'

    def dependencyList = subprojects.collect {
        tasks.findByPath(":${it.name}:ktlintFormat")
    }

    dependencyList.removeIf { it == null}
    dependencyList.add(0, gradle.includedBuild('build-logic').task(':plugins:ktlintFormat'))
    dependencyList.add(0, gradle.includedBuild('build-logic').task(':tools:ktlintFormat'))

    dependsOn dependencyList
}